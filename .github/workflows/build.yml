name: Build

on:
  pull_request:
    branches: [ master ]

# Cancel existing runs if user makes another push.
concurrency:
  group: "${{ github.ref }}"
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  build_linux:
    name: Linux
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}
    strategy:
      fail-fast: false
      matrix:
        os: [linux]
        version: [jdk8u, jdk11u, jdk17u, jdk18u, jdk]
        vm: [hotspot]
        image: [adoptopenjdk/centos7_build_image]
        include:
          - os: alpine-linux
            version: jdk16u
            vm: hotspot
            image: adoptopenjdk/alpine3_build_image
          - os: alpine-linux
            version: jdk17u
            vm: hotspot
            image: adoptopenjdk/alpine3_build_image
          - os: alpine-linux
            version: jdk18u
            vm: hotspot
            image: adoptopenjdk/alpine3_build_image
          - os: alpine-linux
            version: jdk
            vm: hotspot
            image: adoptopenjdk/alpine3_build_image
          - os: linux
            version: jdk11u
            vm: dragonwell
            image: adoptopenjdk/centos7_build_image
          - os: linux
            version: jdk11u
            vm: fast_startup
            image: adoptopenjdk/centos7_build_image
          - os: linux
            version: jdk11u
            vm: bisheng
            image: adoptopenjdk/centos7_build_image
    steps:
    - uses: actions/checkout@v2

    - name: Build Linux
      run: ./build-farm/make-adopt-build-farm.sh
      env:
        JAVA_TO_BUILD: ${{ matrix.version }}
        ARCHITECTURE: x64
        VARIANT: ${{ matrix.vm }}
        TARGET_OS: ${{ matrix.os }}
        FILENAME: OpenJDK.tar.gz
        # Don't set the OS as we use both linux and alpine-linux
        PLATFORM_CONFIG_LOCATION: AdoptOpenJDK/openjdk-build/master/build-farm/platform-specific-configurations

    - uses: actions/upload-artifact@v2
      name: Collect and Archive Artifacts
      with:
        name: ${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}
        path: workspace/target/*

    - name: Unpack jdk
      run: |
        mkdir -p "${HOME}/JDK"
        tar -xf "${GITHUB_WORKSPACE}/workspace/target/OpenJDK.tar.gz" -C "${HOME}/JDK"
    - name: Set root of jdk image dir
      run: |
        imageroot=`find ${HOME}/JDK -name release -type f`
        echo "TEST_JDK_HOME=`dirname ${imageroot}`" >> $GITHUB_ENV
    - name: Smoke test
      uses: adoptium/run-aqa@v1
      with:
        build_list: 'functional/buildAndPackage'
        target: '_extended.functional'
        vendor_testRepos: "${{ github.event.pull_request.head.repo.html_url }}.git"
        vendor_testBranches: "${{ github.head_ref }}"
        vendor_testDirs: "/test/functional"
    - uses: actions/upload-artifact@v2
      name: Collect and Archive SmokeTest Results
      if: failure()
      with:
        name: "${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}_test_output"
        path: ./**/output_*/

  build_macos:
    name: macOS
    runs-on: macos-latest
    strategy:
      fail-fast: false
      matrix:
        os: [macOS]
        version: [jdk8u, jdk11u]
        vm: [hotspot]

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: |
        brew install bash binutils freetype gnu-sed nasm
    - uses: actions/setup-java@v1
      id: setup-java
      with:
        java-version: 7
      if: matrix.version == 'jdk8u'
      
    - name: Select correct Xcode
      run: |
        rm -rf /Applications/Xcode.app
        ln -s /Applications/Xcode_11.7.app /Applications/Xcode.app

    - name: Build macOS
      run: |
        export JAVA_HOME=$JAVA_HOME_11_X64
        # Skip freetype build on jdk11+
        if [ ${{ matrix.version }} != "jdk8u" ]; then
          export BUILD_ARGS="--skip-freetype --make-exploded-image"
          ./build-farm/make-adopt-build-farm.sh
          export BUILD_ARGS="--assemble-exploded-image"
          ./build-farm/make-adopt-build-farm.sh
        else
          ./build-farm/make-adopt-build-farm.sh
        fi
      env:
        JAVA_TO_BUILD: ${{ matrix.version }}
        ARCHITECTURE: x64
        VARIANT: ${{ matrix.vm }}
        TARGET_OS: mac
        FILENAME: OpenJDK.tar.gz
        JDK7_BOOT_DIR: ${{ steps.setup-java.outputs.path }}
      
    - uses: actions/upload-artifact@v2
      name: Collect and Archive Artifacts
      with:
        name: ${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}
        path: workspace/target/*

    - name: Unpack jdk
      run: |
        mkdir -p "${HOME}/JDK"
        tar -xf "${GITHUB_WORKSPACE}/workspace/target/OpenJDK.tar.gz" -C "${HOME}/JDK"

    - name: Set root of jdk image dir
      run: |
        imageroot=`find ${HOME}/JDK -name release -type f`
        echo "TEST_JDK_HOME=`dirname ${imageroot}`" >> $GITHUB_ENV
    - name: Smoke test
      uses: adoptium/run-aqa@v1
      with:
        build_list: 'functional/buildAndPackage'
        target: '_extended.functional'
        vendor_testRepos: "${{ github.event.pull_request.head.repo.html_url }}.git"
        vendor_testBranches: "${{ github.head_ref }}"
        vendor_testDirs: "/test/functional"
    - uses: actions/upload-artifact@v2
      name: Collect and Archive SmokeTest Results
      if: failure()
      with:
        name: "${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}_test_output"
        path: ./**/output_*/

  build_windows:
     name: Windows
     runs-on: ${{ matrix.os }}
     strategy:
       fail-fast: false
       matrix:
         os: [windows-2019]
         version: [jdk]
         vm: [hotspot]
         include:
          - os: windows-2016
            version: jdk11u
            vm: hotspot

     steps:
     - name: Restore cygwin packages from cache
       id: cygwin
       uses: actions/cache@v2
       with:
        path: C:\cygwin_packages
        key: cygwin-packages-${{ runner.os }}-v1

     - name: Install Cygwin
       run: |
         New-Item -Path C:\ -Name 'openjdk' -ItemType 'directory'
         Invoke-WebRequest -UseBasicParsing 'https://cygwin.com/setup-x86_64.exe' -OutFile 'C:\temp\cygwin.exe'
         Start-Process -Wait -FilePath 'C:\temp\cygwin.exe' -ArgumentList '--packages autoconf,automake,bsdtar,cpio,curl,gcc-core,git,gnupg,grep,libtool,make,mingw64-x86_64-gcc-core,perl,rsync,unzip,wget,zip --quiet-mode --download --local-install --delete-orphans --site https://mirrors.kernel.org/sourceware/cygwin/ --local-package-dir C:\cygwin_packages --root C:\cygwin64'

     - uses: actions/setup-java@v1
       id: setup-java7
       with:
         java-version: 7
       if: matrix.version == 'jdk8u'

     - uses: actions/setup-java@v1
       id: setup-java11
       with:
         java-version: 11

     - name: Install Git
       run: |
         Invoke-WebRequest 'https://github.com/git-for-windows/git/releases/download/v2.14.3.windows.1/Git-2.14.3-64-bit.exe' -OutFile 'C:\temp\git.exe'
         Start-Process -Wait -FilePath 'C:\temp\git.exe' -ArgumentList '/SILENT /ALLOWDOWNGRADE=1** /COMPONENTS="icons,ext\reg\shellhere,assoc,assoc_sh"'

     - name: Set PATH
       run: echo "C:\cygwin64\bin;C:\Program Files\Git\bin;" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

     - name: Install Visual Studio 2013
       run: |
         choco install visualstudiocommunity2013
       if: matrix.version == 'jdk8u'

     - name: Cygwin git configuration
       shell: bash
       run: mkdir $HOME && git config --system core.autocrlf false

     - uses: actions/checkout@v2

     - name: Setup 8dot3name
       run: fsutil behavior set disable8dot3 0

     - name: Set JAVA_HOME
       run: echo "JAVA_HOME=$(cygpath ${{ steps.setup-java11.outputs.path }})" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

     - name: Set JDK7_BOOT_DIR
       run: echo "JDK7_BOOT_DIR=$(cygpath ${{ steps.setup-java7.outputs.path }})" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
       if: matrix.version == 'jdk8u'

     - name: Build Windows
       run: |
         bash build-farm/make-adopt-build-farm.sh
       shell: cmd
       env:
         JAVA_TO_BUILD: ${{ matrix.version }}
         ARCHITECTURE: x64
         VARIANT: ${{ matrix.vm }}
         TARGET_OS: windows
         FILENAME: OpenJDK.zip

     - uses: actions/upload-artifact@v2
       name: Collect and Archive Artifacts
       with:
         name: ${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}
         path: workspace/target/*

     - name: Restore build artifacts
       uses: actions/download-artifact@v2
       with:
         name: ${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}
         path: ~/${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}
     - name: Unpack jdk
       run: |
         unzip "${HOME}/${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}/OpenJDK.zip" -d "${HOME}/${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}"

     - name: Set root of jdk image dir
       run: |
         $imageroot = find ${HOME}/${{matrix.version}}-${{matrix.os}}-${{matrix.vm}} -name release -type f
         echo "TEST_JDK_HOME=$(dirname ${imageroot})" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
     - name: Smoke test
       uses: adoptium/run-aqa@v1
       with:
         build_list: 'functional/buildAndPackage'
         target: '_extended.functional'
         vendor_testRepos: "${{ github.event.pull_request.head.repo.html_url }}.git"
         vendor_testBranches: "${{ github.head_ref }}"
         vendor_testDirs: "/test/functional"
     - uses: actions/upload-artifact@v2
       name: Collect and Archive SmokeTest Results
       if: failure()
       with:
         name: "${{matrix.version}}-${{matrix.os}}-${{matrix.vm}}_test_output"
         path: ./**/output_*/
